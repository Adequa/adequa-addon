!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=4)}([function(e,n,t){"use strict";var r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o=t(1),i=o.encodeToBase64,s=o.padRight;function u(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t="",r=1;r<=e;r+=1)t+=-1!==n.indexOf(r)?"1":"0";return s(t,Math.max(0,e-t.length))}function d(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Set,t=0,r=0;r<e.length;r+=1)t=Math.max(t,e[r].id);for(var o=0;o<n.length;o+=1)t=Math.max(t,n[o]);for(var i="",s=1;s<=t;s+=1)i+=-1!==n.indexOf(s)?"1":"0";return i}function a(e,n){for(var t=[],r=[],o=e.map(function(e){return e.id}),i=0;i<e.length;i+=1){var s=e[i].id;if(-1!==n.indexOf(s)&&t.push(s),(-1===n.indexOf(s)||i===e.length-1||-1===o.indexOf(s+1))&&t.length){var u=t.shift(),d=t.pop();t=[],r.push({isRange:"number"==typeof d,startVendorId:u,endVendorId:d})}}return r}function c(e){var n=0;return e.forEach(function(e){e.id>n&&(n=e.id)}),n}e.exports={convertVendorsToRanges:a,encodeConsentString:function(e){var n=e.maxVendorId,t=e.vendorList,o=void 0===t?{}:t,s=e.allowedPurposeIds,l=e.allowedVendorIds,f=o.vendors,p=void 0===f?[]:f,v=o.purposes,h=void 0===v?[]:v;n||(n=c(p));var g=i(r({},e,{maxVendorId:n,purposeIdBitString:d(h,s),isRange:!1,vendorIdBitString:u(n,l)})),m=a(p,l),y=i(r({},e,{maxVendorId:n,purposeIdBitString:d(h,s),isRange:!0,defaultConsent:!1,numEntries:m.length,vendorRangeList:m}));return g.length<y.length?g:y},getMaxVendorId:c,encodeVendorIdsToBits:u,encodePurposeIdsToBits:d}},function(e,n,t){"use strict";var r=t(7),o=t(2),i=o.versionNumBits,s=o.vendorVersionMap;function u(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"0",t="",r=0;r<e;r+=1)t+=n;return t}function d(e,n){return u(Math.max(0,n))+e}function a(e,n){return e+u(Math.max(0,n))}function c(e,n){var t="";return"number"!=typeof e||isNaN(e)||(t=parseInt(e,10).toString(2)),n>=t.length&&(t=d(t,n-t.length)),t.length>n&&(t=t.substring(0,n)),t}function l(e){return c(!0===e?1:0,1)}function f(e,n){return e instanceof Date?c(e.getTime()/100,n):c(e,n)}function p(e,n){return c(e.toUpperCase().charCodeAt(0)-65,n)}function v(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:12;return p(e.slice(0,1),n/2)+p(e.slice(1),n/2)}function h(e,n,t){return parseInt(e.substr(n,t),2)}function g(e,n,t){return new Date(100*h(e,n,t))}function m(e,n){return 1===parseInt(e.substr(n,1),2)}function y(e){var n=h(e);return String.fromCharCode(n+65).toLowerCase()}function w(e,n,t){var r=e.substr(n,t);return y(r.slice(0,t/2))+y(r.slice(t/2))}function b(e){var n=e.input,t=e.field,r=t.name,o=t.type,i=t.numBits,s=t.encoder,u=t.validator;if("function"==typeof u&&!u(n))return"";if("function"==typeof s)return s(n);var d="function"==typeof i?i(n):i,p=n[r],h=null==p?"":p;switch(o){case"int":return c(h,d);case"bool":return l(h);case"date":return f(h,d);case"bits":return a(h,d-h.length).substring(0,d);case"list":return h.reduce(function(e,n){return e+S({input:n,fields:t.fields})},"");case"language":return v(h,d);default:throw new Error("ConsentString - Unknown field type "+o+" for encoding")}}function S(e){var n=e.input;return e.fields.reduce(function(e,t){return e+=b({input:n,field:t})},"")}function A(e){var n=e.input,t=e.output,r=e.startPosition,o=e.field,i=o.type,s=o.numBits,u=o.decoder,d=o.validator,a=o.listCount;if("function"==typeof d&&!d(t))return{newPosition:r};if("function"==typeof u)return u(n,t,r);var c="function"==typeof s?s(t):s;switch(i){case"int":return{fieldValue:h(n,r,c)};case"bool":return{fieldValue:m(n,r)};case"date":return{fieldValue:g(n,r,c)};case"bits":return{fieldValue:n.substr(r,c)};case"list":return function(e,n,t,r,o){var i=0;"function"==typeof o?i=o(n):"number"==typeof o&&(i=o);for(var s=t,u=[],d=0;d<i;d+=1){var a=C({input:e,fields:r.fields,startPosition:s});s=a.newPosition,u.push(a.decodedObject)}return{fieldValue:u,newPosition:s}}(n,t,r,o,a);case"language":return{fieldValue:w(n,r,c)};default:throw new Error("ConsentString - Unknown field type "+i+" for decoding")}}function C(e){var n=e.input,t=e.fields,r=e.startPosition,o=void 0===r?0:r;return{decodedObject:t.reduce(function(e,t){var r=t.name,i=t.numBits,s=A({input:n,output:e,startPosition:o,field:t}),u=s.fieldValue,d=s.newPosition;return void 0!==u&&(e[r]=u),void 0!==d?o=d:"number"==typeof i&&(o+=i),e},{}),newPosition:o}}function V(e,n){var t=e.version;if("number"!=typeof t)throw new Error("ConsentString - No version field to encode");if(n[t])return S({input:e,fields:n[t].fields});throw new Error("ConsentString - No definition for version "+t)}e.exports={padRight:a,padLeft:d,encodeField:b,encodeDataToBits:V,encodeIntToBits:c,encodeBoolToBits:l,encodeDateToBits:f,encodeLanguageToBits:v,encodeLetterToBits:p,encodeToBase64:function(e){var n=V(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:s);if(n){for(var t=a(n,7-(n.length+7)%8),o="",i=0;i<t.length;i+=8)o+=String.fromCharCode(parseInt(t.substr(i,8),2));return r.encode(o).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}return null},decodeBitsToIds:function(e){return e.split("").reduce(function(e,n,t){return"1"===n&&-1===e.indexOf(t+1)&&e.push(t+1),e},[])},decodeBitsToInt:h,decodeBitsToDate:g,decodeBitsToBool:m,decodeBitsToLanguage:w,decodeBitsToLetter:y,decodeFromBase64:function(e,n){for(var t=e;t.length%4!=0;)t+="=";t=t.replace(/-/g,"+").replace(/_/g,"/");for(var o=r.decode(t),u="",a=0;a<o.length;a+=1){var c=o.charCodeAt(a).toString(2);u+=d(c,8-c.length)}return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s,t=h(e,0,i);if("number"!=typeof t)throw new Error("ConsentString - Unknown version number in the string to decode");if(!s[t])throw new Error("ConsentString - Unsupported version "+t+" in the string to decode");return C({input:e,fields:n[t].fields}).decodedObject}(u,n)}}},function(e,n,t){"use strict";e.exports={versionNumBits:6,vendorVersionMap:{1:{version:1,metadataFields:["version","created","lastUpdated","cmpId","cmpVersion","consentScreen","vendorListVersion"],fields:[{name:"version",type:"int",numBits:6},{name:"created",type:"date",numBits:36},{name:"lastUpdated",type:"date",numBits:36},{name:"cmpId",type:"int",numBits:12},{name:"cmpVersion",type:"int",numBits:12},{name:"consentScreen",type:"int",numBits:6},{name:"consentLanguage",type:"language",numBits:12},{name:"vendorListVersion",type:"int",numBits:12},{name:"purposeIdBitString",type:"bits",numBits:24},{name:"maxVendorId",type:"int",numBits:16},{name:"isRange",type:"bool",numBits:1},{name:"vendorIdBitString",type:"bits",numBits:function(e){return e.maxVendorId},validator:function(e){return!e.isRange}},{name:"defaultConsent",type:"bool",numBits:1,validator:function(e){return e.isRange}},{name:"numEntries",numBits:12,type:"int",validator:function(e){return e.isRange}},{name:"vendorRangeList",type:"list",listCount:function(e){return e.numEntries},validator:function(e){return e.isRange},fields:[{name:"isRange",type:"bool",numBits:1},{name:"startVendorId",type:"int",numBits:16},{name:"endVendorId",type:"int",numBits:16,validator:function(e){return e.isRange}}]}]}}}},function(e,n,t){"use strict";var r=t(1),o=r.decodeBitsToIds,i=r.decodeFromBase64;e.exports={decodeConsentString:function(e){var n=i(e),t=n.version,r=n.cmpId,s=n.vendorListVersion,u=n.purposeIdBitString,d=n.maxVendorId,a=n.created,c=n.lastUpdated,l=n.isRange,f=n.defaultConsent,p=n.vendorIdBitString,v=n.vendorRangeList,h=n.cmpVersion,g=n.consentScreen,m=n.consentLanguage,y={version:t,cmpId:r,vendorListVersion:s,allowedPurposeIds:o(u),maxVendorId:d,created:a,lastUpdated:c,cmpVersion:h,consentScreen:g,consentLanguage:m};if(l){var w=v.reduce(function(e,n){for(var t=n.isRange,r=n.startVendorId,o=n.endVendorId,i=t?o:r,s=r;s<=i;s+=1)e[s]=!0;return e},{});y.allowedVendorIds=[];for(var b=1;b<=d;b+=1)(f&&!w[b]||!f&&w[b])&&-1===y.allowedVendorIds.indexOf(b)&&y.allowedVendorIds.push(b)}else y.allowedVendorIds=o(p);return y}}},function(e,n,t){const{ConsentString:r}=t(5);Adequa.actions.consent={},Adequa.actions.consent.getSettingsByWebsiteId=function(e){return Adequa.current.consent.settings.filter(n=>n.id.website_id===e)},Adequa.actions.consent.getDefaultPurposeSettings=function(){const e=Adequa.current.consent.settings.filter(e=>"all"===e.id.website_id&&"all"===e.id.vendor_id),n={};for(const t of e)n[t.id.purpose_id]=t;return n},Adequa.actions.consent.getCurrentWebsitePurposeSettings=function(e){Adequa.API.tabs.query({active:!0,lastFocusedWindow:!0},n=>{const t=n[0]||{},r=Adequa.actions.consent.getSettingsByWebsiteId(Adequa.getWebsiteId(t.url||"nourl")),o=this.getDefaultPurposeSettings()||{};for(const e of r)o[e.id.purpose_id]=e;e(o)})},Adequa.actions.consent.getDefaultVendorSettings=function(){const e=Adequa.current.consent.settings.filter(e=>"all"===e.id.website_id&&"all"===e.id.purpose_id),n={};for(const t of e)n[t.id.vendor_id]=t;return n},Adequa.actions.consent.getCurrentWebsiteVendorSettings=function(e){Adequa.API.tabs.query({active:!0,lastFocusedWindow:!0},n=>{const t=n[0]||{},r=Adequa.actions.consent.getSettingsByWebsiteId(Adequa.getWebsiteId(t.url||"nourl")),o=this.getDefaultVendorSettings()||{};for(const e of r)o[e.id.vendor_id]=e;e(o)})},Adequa.actions.consent.setOrUpdateSetting=function(e){const n=Adequa.current.consent.settings.findIndex(n=>n.id.website_id===e.id.website_id&&n.id.purpose_id===e.id.purpose_id&&n.id.vendor_id===e.id.vendor_id);-1===n?Adequa.current.consent.settings.push(e):Adequa.current.consent.settings[n]=e,Adequa.storage.setCurrent({})},Adequa.actions.consent.getConsentData=function(e){const n=Adequa.actions.consent.getSettingsByWebsiteId("all"),t=Adequa.actions.consent.getSettingsByWebsiteId(e),o=[],i=[],s=[],u=[];for(const e of t)"all"===e.id.purpose_id&&"all"!==e.id.vendor_id?-1===s.indexOf(e.id.vendor_id)&&-1===u.indexOf(e.id.vendor_id)&&(-1===e.value?s.push(e.id.vendor_id):u.push(e.id.vendor_id)):"all"!==e.id.purpose_id&&"all"===e.id.vendor_id?-1===o.indexOf(e.id.purpose_id)&&-1===i.indexOf(e.id.purpose_id)&&(-1===e.value?o.push(e.id.purpose_id):i.push(e.id.purpose_id)):-1===n.indexOf(e)&&n.push(e);for(const e of n)if("all"===e.id.purpose_id&&"all"!==e.id.vendor_id)-1===s.indexOf(e.id.vendor_id)&&-1===u.indexOf(e.id.vendor_id)&&(-1===e.value?s.push(e.id.vendor_id):u.push(e.id.vendor_id));else if("all"!==e.id.purpose_id&&"all"===e.id.vendor_id)-1===o.indexOf(e.id.purpose_id)&&-1===i.indexOf(e.id.purpose_id)&&(-1===e.value?o.push(e.id.purpose_id):i.push(e.id.purpose_id));else if("all"===e.id.purpose_id&&"all"===e.id.vendor_id)if(-1===e.value){for(const e of Adequa.current.purposeList)-1===o.indexOf(e)&&-1===i.indexOf(e)&&o.push(e);for(const e of Adequa.current.vendorList)-1===s.indexOf(e)&&-1===u.indexOf(e)&&s.push(e)}else{for(const e of Adequa.current.purposeList)-1===o.indexOf(e)&&-1===i.indexOf(e)&&i.push(e);for(const e of Adequa.current.vendorList)-1===s.indexOf(e)&&-1===u.indexOf(e)&&u.push(e)}console.log("forbidden vendor :",u),console.log("allowed vendors :",s),console.log("forbidden purposes :",i),console.log("allowed purposes :",o);const d=new r;return d.setGlobalVendorList(Adequa.current.fullVendorList),d.setCmpId(1),d.setCmpVersion(1),d.setConsentScreen(1),d.setConsentLanguage("fr"),d.setPurposesAllowed(o),d.setVendorsAllowed(s),{consentString:d.getConsentString(),allowedVendors:s,allowedPurposes:o,vendorList:Adequa.current.vendorList,purposeList:Adequa.current.purposeList}}},function(e,n,t){"use strict";var r=t(6).ConsentString,o=t(3).decodeConsentString,i=t(0).encodeConsentString;e.exports={ConsentString:r,decodeConsentString:o,encodeConsentString:i}},function(e,n,t){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(0),s=i.encodeConsentString,u=i.getMaxVendorId,d=i.encodeVendorIdsToBits,a=i.encodePurposeIdsToBits,c=t(3).decodeConsentString,l=t(2).vendorVersionMap,f=/^[a-z]{2}$/,p=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.created=new Date,this.lastUpdated=new Date,this.version=1,this.vendorList=null,this.vendorListVersion=null,this.cmpId=null,this.cmpVersion=null,this.consentScreen=null,this.consentLanguage=null,this.allowedPurposeIds=[],this.allowedVendorIds=[],n&&Object.assign(this,c(n))}return o(e,[{key:"getConsentString",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(!this.vendorList)throw new Error("ConsentString - A vendor list is required to encode a consent string");return!0===e&&(this.lastUpdated=new Date),s({version:this.getVersion(),vendorList:this.vendorList,allowedPurposeIds:this.allowedPurposeIds,allowedVendorIds:this.allowedVendorIds,created:this.created,lastUpdated:this.lastUpdated,cmpId:this.cmpId,cmpVersion:this.cmpVersion,consentScreen:this.consentScreen,consentLanguage:this.consentLanguage,vendorListVersion:this.vendorListVersion})}},{key:"getMaxVendorId",value:function(){return u(this.vendorList.vendors)}},{key:"getParsedVendorConsents",value:function(){return d(u(this.vendorList.vendors),this.allowedVendorIds)}},{key:"getParsedPurposeConsents",value:function(){return a(this.vendorList.purposes,this.allowedPurposeIds)}},{key:"getMetadataString",value:function(){return s({version:this.getVersion(),created:this.created,lastUpdated:this.lastUpdated,cmpId:this.cmpId,cmpVersion:this.cmpVersion,consentScreen:this.consentScreen,vendorListVersion:this.vendorListVersion})}},{key:"getVersion",value:function(){return this.version}},{key:"getVendorListVersion",value:function(){return this.vendorListVersion}},{key:"setGlobalVendorList",value:function(e){if("object"!==(void 0===e?"undefined":r(e)))throw new Error("ConsentString - You must provide an object when setting the global vendor list");if(!e.vendorListVersion||!Array.isArray(e.purposes)||!Array.isArray(e.vendors))throw new Error("ConsentString - The provided vendor list does not respect the schema from the IAB EU’s GDPR Consent and Transparency Framework");this.vendorList={vendorListVersion:e.vendorListVersion,lastUpdated:e.lastUpdated,purposes:e.purposes,features:e.features,vendors:e.vendors.slice(0).sort(function(e,n){return e.id<n.id?-1:1})},this.vendorListVersion=e.vendorListVersion}},{key:"setCmpId",value:function(e){this.cmpId=e}},{key:"getCmpId",value:function(){return this.cmpId}},{key:"setCmpVersion",value:function(e){this.cmpVersion=e}},{key:"getCmpVersion",value:function(){return this.cmpVersion}},{key:"setConsentScreen",value:function(e){this.consentScreen=e}},{key:"getConsentScreen",value:function(){return this.consentScreen}},{key:"setConsentLanguage",value:function(e){if(!1===f.test(e))throw new Error("ConsentString - The consent language must be a two-letter ISO639-1 code (en, fr, de, etc.)");this.consentLanguage=e}},{key:"getConsentLanguage",value:function(){return this.consentLanguage}},{key:"setPurposesAllowed",value:function(e){this.allowedPurposeIds=e}},{key:"getPurposesAllowed",value:function(){return this.allowedPurposeIds}},{key:"setPurposeAllowed",value:function(e,n){var t=this.allowedPurposeIds.indexOf(e);!0===n?-1===t&&this.allowedPurposeIds.push(e):!1===n&&-1!==t&&this.allowedPurposeIds.splice(t,1)}},{key:"isPurposeAllowed",value:function(e){return-1!==this.allowedPurposeIds.indexOf(e)}},{key:"setVendorsAllowed",value:function(e){this.allowedVendorIds=e}},{key:"getVendorsAllowed",value:function(){return this.allowedVendorIds}},{key:"setVendorAllowed",value:function(e,n){var t=this.allowedVendorIds.indexOf(e);!0===n?-1===t&&this.allowedVendorIds.push(e):!1===n&&-1!==t&&this.allowedVendorIds.splice(t,1)}},{key:"isVendorAllowed",value:function(e){return-1!==this.allowedVendorIds.indexOf(e)}}],[{key:"decodeMetadataString",value:function(e){var n=c(e),t={};return l[n.version].metadataFields.forEach(function(e){t[e]=n[e]}),t}}]),e}();e.exports={ConsentString:p}},function(e,n,t){(function(e,r){var o;/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */!function(i){var s=n,u=(e&&e.exports,"object"==typeof r&&r);u.global!==u&&u.window;var d=function(e){this.message=e};(d.prototype=new Error).name="InvalidCharacterError";var a=function(e){throw new d(e)},c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=/[\t\n\f\r ]/g,f={encode:function(e){e=String(e),/[^\0-\xFF]/.test(e)&&a("The string to be encoded contains characters outside of the Latin1 range.");for(var n,t,r,o,i=e.length%3,s="",u=-1,d=e.length-i;++u<d;)n=e.charCodeAt(u)<<16,t=e.charCodeAt(++u)<<8,r=e.charCodeAt(++u),s+=c.charAt((o=n+t+r)>>18&63)+c.charAt(o>>12&63)+c.charAt(o>>6&63)+c.charAt(63&o);return 2==i?(n=e.charCodeAt(u)<<8,t=e.charCodeAt(++u),s+=c.charAt((o=n+t)>>10)+c.charAt(o>>4&63)+c.charAt(o<<2&63)+"="):1==i&&(o=e.charCodeAt(u),s+=c.charAt(o>>2)+c.charAt(o<<4&63)+"=="),s},decode:function(e){var n=(e=String(e).replace(l,"")).length;n%4==0&&(n=(e=e.replace(/==?$/,"")).length),(n%4==1||/[^+a-zA-Z0-9\/]/.test(e))&&a("Invalid character: the string to be decoded is not correctly encoded.");for(var t,r,o=0,i="",s=-1;++s<n;)r=c.indexOf(e.charAt(s)),t=o%4?64*t+r:r,o++%4&&(i+=String.fromCharCode(255&t>>(-2*o&6)));return i},version:"0.1.0"};void 0===(o=function(){return f}.call(n,t,n,e))||(e.exports=o)}()}).call(this,t(8)(e),t(9))},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,