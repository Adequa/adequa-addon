!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=4)}([function(e,n,t){"use strict";var o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r=t(1),i=r.encodeToBase64,s=r.padRight;function d(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t="",o=1;o<=e;o+=1)t+=-1!==n.indexOf(o)?"1":"0";return s(t,Math.max(0,e-t.length))}function u(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Set,t=0,o=0;o<e.length;o+=1)t=Math.max(t,e[o].id);for(var r=0;r<n.length;r+=1)t=Math.max(t,n[r]);for(var i="",s=1;s<=t;s+=1)i+=-1!==n.indexOf(s)?"1":"0";return i}function a(e,n){for(var t=[],o=[],r=e.map(function(e){return e.id}),i=0;i<e.length;i+=1){var s=e[i].id;if(-1!==n.indexOf(s)&&t.push(s),(-1===n.indexOf(s)||i===e.length-1||-1===r.indexOf(s+1))&&t.length){var d=t.shift(),u=t.pop();t=[],o.push({isRange:"number"==typeof u,startVendorId:d,endVendorId:u})}}return o}function c(e){var n=0;return e.forEach(function(e){e.id>n&&(n=e.id)}),n}e.exports={convertVendorsToRanges:a,encodeConsentString:function(e){var n=e.maxVendorId,t=e.vendorList,r=void 0===t?{}:t,s=e.allowedPurposeIds,l=e.allowedVendorIds,f=r.vendors,p=void 0===f?[]:f,v=r.purposes,h=void 0===v?[]:v;n||(n=c(p));var g=i(o({},e,{maxVendorId:n,purposeIdBitString:u(h,s),isRange:!1,vendorIdBitString:d(n,l)})),m=a(p,l),y=i(o({},e,{maxVendorId:n,purposeIdBitString:u(h,s),isRange:!0,defaultConsent:!1,numEntries:m.length,vendorRangeList:m}));return g.length<y.length?g:y},getMaxVendorId:c,encodeVendorIdsToBits:d,encodePurposeIdsToBits:u}},function(e,n,t){"use strict";var o=t(7),r=t(2),i=r.versionNumBits,s=r.vendorVersionMap;function d(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"0",t="",o=0;o<e;o+=1)t+=n;return t}function u(e,n){return d(Math.max(0,n))+e}function a(e,n){return e+d(Math.max(0,n))}function c(e,n){var t="";return"number"!=typeof e||isNaN(e)||(t=parseInt(e,10).toString(2)),n>=t.length&&(t=u(t,n-t.length)),t.length>n&&(t=t.substring(0,n)),t}function l(e){return c(!0===e?1:0,1)}function f(e,n){return e instanceof Date?c(e.getTime()/100,n):c(e,n)}function p(e,n){return c(e.toUpperCase().charCodeAt(0)-65,n)}function v(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:12;return p(e.slice(0,1),n/2)+p(e.slice(1),n/2)}function h(e,n,t){return parseInt(e.substr(n,t),2)}function g(e,n,t){return new Date(100*h(e,n,t))}function m(e,n){return 1===parseInt(e.substr(n,1),2)}function y(e){var n=h(e);return String.fromCharCode(n+65).toLowerCase()}function w(e,n,t){var o=e.substr(n,t);return y(o.slice(0,t/2))+y(o.slice(t/2))}function A(e){var n=e.input,t=e.field,o=t.name,r=t.type,i=t.numBits,s=t.encoder,d=t.validator;if("function"==typeof d&&!d(n))return"";if("function"==typeof s)return s(n);var u="function"==typeof i?i(n):i,p=n[o],h=null==p?"":p;switch(r){case"int":return c(h,u);case"bool":return l(h);case"date":return f(h,u);case"bits":return a(h,u-h.length).substring(0,u);case"list":return h.reduce(function(e,n){return e+S({input:n,fields:t.fields})},"");case"language":return v(h,u);default:throw new Error("ConsentString - Unknown field type "+r+" for encoding")}}function S(e){var n=e.input;return e.fields.reduce(function(e,t){return e+=A({input:n,field:t})},"")}function b(e){var n=e.input,t=e.output,o=e.startPosition,r=e.field,i=r.type,s=r.numBits,d=r.decoder,u=r.validator,a=r.listCount;if("function"==typeof u&&!u(t))return{newPosition:o};if("function"==typeof d)return d(n,t,o);var c="function"==typeof s?s(t):s;switch(i){case"int":return{fieldValue:h(n,o,c)};case"bool":return{fieldValue:m(n,o)};case"date":return{fieldValue:g(n,o,c)};case"bits":return{fieldValue:n.substr(o,c)};case"list":return function(e,n,t,o,r){var i=0;"function"==typeof r?i=r(n):"number"==typeof r&&(i=r);for(var s=t,d=[],u=0;u<i;u+=1){var a=x({input:e,fields:o.fields,startPosition:s});s=a.newPosition,d.push(a.decodedObject)}return{fieldValue:d,newPosition:s}}(n,t,o,r,a);case"language":return{fieldValue:w(n,o,c)};default:throw new Error("ConsentString - Unknown field type "+i+" for decoding")}}function x(e){var n=e.input,t=e.fields,o=e.startPosition,r=void 0===o?0:o;return{decodedObject:t.reduce(function(e,t){var o=t.name,i=t.numBits,s=b({input:n,output:e,startPosition:r,field:t}),d=s.fieldValue,u=s.newPosition;return void 0!==d&&(e[o]=d),void 0!==u?r=u:"number"==typeof i&&(r+=i),e},{}),newPosition:r}}function _(e,n){var t=e.version;if("number"!=typeof t)throw new Error("ConsentString - No version field to encode");if(n[t])return S({input:e,fields:n[t].fields});throw new Error("ConsentString - No definition for version "+t)}e.exports={padRight:a,padLeft:u,encodeField:A,encodeDataToBits:_,encodeIntToBits:c,encodeBoolToBits:l,encodeDateToBits:f,encodeLanguageToBits:v,encodeLetterToBits:p,encodeToBase64:function(e){var n=_(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:s);if(n){for(var t=a(n,7-(n.length+7)%8),r="",i=0;i<t.length;i+=8)r+=String.fromCharCode(parseInt(t.substr(i,8),2));return o.encode(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}return null},decodeBitsToIds:function(e){return e.split("").reduce(function(e,n,t){return"1"===n&&-1===e.indexOf(t+1)&&e.push(t+1),e},[])},decodeBitsToInt:h,decodeBitsToDate:g,decodeBitsToBool:m,decodeBitsToLanguage:w,decodeBitsToLetter:y,decodeFromBase64:function(e,n){for(var t=e;t.length%4!=0;)t+="=";t=t.replace(/-/g,"+").replace(/_/g,"/");for(var r=o.decode(t),d="",a=0;a<r.length;a+=1){var c=r.charCodeAt(a).toString(2);d+=u(c,8-c.length)}return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s,t=h(e,0,i);if("number"!=typeof t)throw new Error("ConsentString - Unknown version number in the string to decode");if(!s[t])throw new Error("ConsentString - Unsupported version "+t+" in the string to decode");return x({input:e,fields:n[t].fields}).decodedObject}(d,n)}}},function(e,n,t){"use strict";e.exports={versionNumBits:6,vendorVersionMap:{1:{version:1,metadataFields:["version","created","lastUpdated","cmpId","cmpVersion","consentScreen","vendorListVersion"],fields:[{name:"version",type:"int",numBits:6},{name:"created",type:"date",numBits:36},{name:"lastUpdated",type:"date",numBits:36},{name:"cmpId",type:"int",numBits:12},{name:"cmpVersion",type:"int",numBits:12},{name:"consentScreen",type:"int",numBits:6},{name:"consentLanguage",type:"language",numBits:12},{name:"vendorListVersion",type:"int",numBits:12},{name:"purposeIdBitString",type:"bits",numBits:24},{name:"maxVendorId",type:"int",numBits:16},{name:"isRange",type:"bool",numBits:1},{name:"vendorIdBitString",type:"bits",numBits:function(e){return e.maxVendorId},validator:function(e){return!e.isRange}},{name:"defaultConsent",type:"bool",numBits:1,validator:function(e){return e.isRange}},{name:"numEntries",numBits:12,type:"int",validator:function(e){return e.isRange}},{name:"vendorRangeList",type:"list",listCount:function(e){return e.numEntries},validator:function(e){return e.isRange},fields:[{name:"isRange",type:"bool",numBits:1},{name:"startVendorId",type:"int",numBits:16},{name:"endVendorId",type:"int",numBits:16,validator:function(e){return e.isRange}}]}]}}}},function(e,n,t){"use strict";var o=t(1),r=o.decodeBitsToIds,i=o.decodeFromBase64;e.exports={decodeConsentString:function(e){var n=i(e),t=n.version,o=n.cmpId,s=n.vendorListVersion,d=n.purposeIdBitString,u=n.maxVendorId,a=n.created,c=n.lastUpdated,l=n.isRange,f=n.defaultConsent,p=n.vendorIdBitString,v=n.vendorRangeList,h=n.cmpVersion,g=n.consentScreen,m=n.consentLanguage,y={version:t,cmpId:o,vendorListVersion:s,allowedPurposeIds:r(d),maxVendorId:u,created:a,lastUpdated:c,cmpVersion:h,consentScreen:g,consentLanguage:m};if(l){var w=v.reduce(function(e,n){for(var t=n.isRange,o=n.startVendorId,r=n.endVendorId,i=t?r:o,s=o;s<=i;s+=1)e[s]=!0;return e},{});y.allowedVendorIds=[];for(var A=1;A<=u;A+=1)(f&&!w[A]||!f&&w[A])&&-1===y.allowedVendorIds.indexOf(A)&&y.allowedVendorIds.push(A)}else y.allowedVendorIds=r(p);return y}}},function(e,n,t){const{ConsentString:o}=t(5);Adequa.model.consent={cmp:{},view:{}},Adequa.model.consent.getSettings=function(e){let n=Adequa.storage.consent.settings;return e.website_id&&(n=n.filter(n=>n.id.website_id===e.website_id)),e.vendor_id&&(n=n.filter(n=>n.id.vendor_id===e.vendor_id)),e.purpose_id&&(n=n.filter(n=>n.id.purpose_id===e.purpose_id)),n},Adequa.model.consent.getAllSettings=function(e,n){const t=Adequa.model.consent.getSettings(e),o={};for(const e of t)o[e.id[n]]=e;return o},Adequa.model.consent.setSetting=function(e){const n=Adequa.model.consent.getSettings(e.id);if(n.length&&n[0].value===e.value)return;Adequa.process.analytics.sendAnonymousEvent("nourl","consent","default_parameter_change",Adequa.storage.adequaPurposeList[e.id.purpose_id-1].shortname,1===e.value?0:1);const t=Adequa.storage.consent.settings.findIndex(n=>n.id.website_id===e.id.website_id&&n.id.purpose_id===e.id.purpose_id&&n.id.vendor_id===e.id.vendor_id);-1===t?Adequa.storage.consent.settings.push(e):Adequa.storage.consent.settings[t]=e,Adequa.setStorage({})},Adequa.model.consent.setConsent=function(e,n,t){for(const n of Adequa.storage.purposeList)Adequa.model.consent.setSetting({id:{website_id:Adequa.domain(t),purpose_id:n.id,vendor_id:"all"},value:-1===e.indexOf(n.id)?1:-1});for(const e of Adequa.storage.vendorList)Adequa.model.consent.setSetting({id:{website_id:Adequa.domain(t),purpose_id:"all",vendor_id:e.id},value:-1===n.indexOf(e.id)?1:-1})},Adequa.model.consent.acceptAll=function(){Adequa.storage.adequaPurposeList.forEach(e=>{Adequa.model.consent.setSetting({id:{website_id:"all",purpose_id:e.id,vendor_id:"all"},value:-1})})},Adequa.model.consent.setConsentString=function(e,n){const t=new o(e);t.setGlobalVendorList(Adequa.storage.fullVendorList);const r=t.getPurposesAllowed(),i=t.getVendorsAllowed();for(const e of Adequa.storage.purposeList)Adequa.model.consent.setSetting({id:{website_id:Adequa.domain(n),purpose_id:e.id,vendor_id:"all"},value:-1===r.indexOf(e.id)?1:-1});for(const e of Adequa.storage.vendorList)Adequa.model.consent.setSetting({id:{website_id:Adequa.domain(n),purpose_id:"all",vendor_id:e.id},value:-1===i.indexOf(e.id)?1:-1})},Adequa.model.consent.cmp.getVendorConsents=function(e,n){},Adequa.model.consent.cmp.getConsentData=function(e,n){const t=Adequa.model.consent.getSettings({website_id:"all"}),o=Adequa.model.consent.getSettings({website_id:e});let r=[1];const i=[];let s=[];const d=[];for(const e of o)"all"===e.id.purpose_id&&"all"!==e.id.vendor_id?-1===s.indexOf(e.id.vendor_id)&&-1===d.indexOf(e.id.vendor_id)&&(-1===e.value?s.push(e.id.vendor_id):d.push(e.id.vendor_id)):"all"!==e.id.purpose_id&&"all"===e.id.vendor_id?-1===r.indexOf(e.id.purpose_id)&&-1===i.indexOf(e.id.purpose_id)&&(-1===e.value?r.push(e.id.purpose_id):i.push(e.id.purpose_id)):-1===t.indexOf(e)&&t.push(e);for(const e of t)if("all"===e.id.purpose_id&&"all"!==e.id.vendor_id)-1===s.indexOf(e.id.vendor_id)&&-1===d.indexOf(e.id.vendor_id)&&(-1===e.value?s.push(e.id.vendor_id):d.push(e.id.vendor_id));else if("all"!==e.id.purpose_id&&"all"===e.id.vendor_id)-1===r.indexOf(e.id.purpose_id)&&-1===i.indexOf(e.id.purpose_id)&&(-1===e.value?r.push(e.id.purpose_id):i.push(e.id.purpose_id));else if("all"===e.id.purpose_id&&"all"===e.id.vendor_id)if(-1===e.value){for(const e of Adequa.storage.purposeList)-1===r.indexOf(e)&&-1===i.indexOf(e)&&r.push(e);for(const e of Adequa.storage.vendorList)-1===s.indexOf(e)&&-1===d.indexOf(e)&&s.push(e)}else{for(const e of Adequa.storage.purposeList)-1===r.indexOf(e)&&-1===i.indexOf(e)&&i.push(e);for(const e of Adequa.storage.vendorList)-1===s.indexOf(e)&&-1===d.indexOf(e)&&d.push(e)}return s=s.map(e=>parseInt(e)),r=r.map(e=>parseInt(e)),"function"==typeof n&&n({allowedVendors:s,allowedPurposes:r}),r}},function(e,n,t){"use strict";var o=t(6).ConsentString,r=t(3).decodeConsentString,i=t(0).encodeConsentString;e.exports={ConsentString:o,decodeConsentString:r,encodeConsentString:i}},function(e,n,t){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(n,t,o){return t&&e(n.prototype,t),o&&e(n,o),n}}();var i=t(0),s=i.encodeConsentString,d=i.getMaxVendorId,u=i.encodeVendorIdsToBits,a=i.encodePurposeIdsToBits,c=t(3).decodeConsentString,l=t(2).vendorVersionMap,f=/^[a-z]{2}$/,p=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.created=new Date,this.lastUpdated=new Date,this.version=1,this.vendorList=null,this.vendorListVersion=null,this.cmpId=null,this.cmpVersion=null,this.consentScreen=null,this.consentLanguage=null,this.allowedPurposeIds=[],this.allowedVendorIds=[],n&&Object.assign(this,c(n))}return r(e,[{key:"getConsentString",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(!this.vendorList)throw new Error("ConsentString - A vendor list is required to encode a consent string");return!0===e&&(this.lastUpdated=new Date),s({version:this.getVersion(),vendorList:this.vendorList,allowedPurposeIds:this.allowedPurposeIds,allowedVendorIds:this.allowedVendorIds,created:this.created,lastUpdated:this.lastUpdated,cmpId:this.cmpId,cmpVersion:this.cmpVersion,consentScreen:this.consentScreen,consentLanguage:this.consentLanguage,vendorListVersion:this.vendorListVersion})}},{key:"getMaxVendorId",value:function(){return d(this.vendorList.vendors)}},{key:"getParsedVendorConsents",value:function(){return u(d(this.vendorList.vendors),this.allowedVendorIds)}},{key:"getParsedPurposeConsents",value:function(){return a(this.vendorList.purposes,this.allowedPurposeIds)}},{key:"getMetadataString",value:function(){return s({version:this.getVersion(),created:this.created,lastUpdated:this.lastUpdated,cmpId:this.cmpId,cmpVersion:this.cmpVersion,consentScreen:this.consentScreen,vendorListVersion:this.vendorListVersion})}},{key:"getVersion",value:function(){return this.version}},{key:"getVendorListVersion",value:function(){return this.vendorListVersion}},{key:"setGlobalVendorList",value:function(e){if("object"!==(void 0===e?"undefined":o(e)))throw new Error("ConsentString - You must provide an object when setting the global vendor list");if(!e.vendorListVersion||!Array.isArray(e.purposes)||!Array.isArray(e.vendors))throw new Error("ConsentString - The provided vendor list does not respect the schema from the IAB EU’s GDPR Consent and Transparency Framework");this.vendorList={vendorListVersion:e.vendorListVersion,lastUpdated:e.lastUpdated,purposes:e.purposes,features:e.features,vendors:e.vendors.slice(0).sort(function(e,n){return e.id<n.id?-1:1})},this.vendorListVersion=e.vendorListVersion}},{key:"setCmpId",value:function(e){this.cmpId=e}},{key:"getCmpId",value:function(){return this.cmpId}},{key:"setCmpVersion",value:function(e){this.cmpVersion=e}},{key:"getCmpVersion",value:function(){return this.cmpVersion}},{key:"setConsentScreen",value:function(e){this.consentScreen=e}},{key:"getConsentScreen",value:function(){return this.consentScreen}},{key:"setConsentLanguage",value:function(e){if(!1===f.test(e))throw new Error("ConsentString - The consent language must be a two-letter ISO639-1 code (en, fr, de, etc.)");this.consentLanguage=e}},{key:"getConsentLanguage",value:function(){return this.consentLanguage}},{key:"setPurposesAllowed",value:function(e){this.allowedPurposeIds=e}},{key:"getPurposesAllowed",value:function(){return this.allowedPurposeIds}},{key:"setPurposeAllowed",value:function(e,n){var t=this.allowedPurposeIds.indexOf(e);!0===n?-1===t&&this.allowedPurposeIds.push(e):!1===n&&-1!==t&&this.allowedPurposeIds.splice(t,1)}},{key:"isPurposeAllowed",value:function(e){return-1!==this.allowedPurposeIds.indexOf(e)}},{key:"setVendorsAllowed",value:function(e){this.allowedVendorIds=e}},{key:"getVendorsAllowed",value:function(){return this.allowedVendorIds}},{key:"setVendorAllowed",value:function(e,n){var t=this.allowedVendorIds.indexOf(e);!0===n?-1===t&&this.allowedVendorIds.push(e):!1===n&&-1!==t&&this.allowedVendorIds.splice(t,1)}},{key:"isVendorAllowed",value:function(e){return-1!==this.allowedVendorIds.indexOf(e)}}],[{key:"decodeMetadataString",value:function(e){var n=c(e),t={};return l[n.version].metadataFields.forEach(function(e){t[e]=n[e]}),t}}]),e}();e.exports={ConsentString:p}},function(e,n,t){(function(e,o){var r;/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */!function(i){var s=n,d=(e&&e.exports,"object"==typeof o&&o);d.global!==d&&d.window;var u=function(e){this.message=e};(u.prototype=new Error).name="InvalidCharacterError";var a=function(e){throw new u(e)},c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=/[\t\n\f\r ]/g,f={encode:function(e){e=String(e),/[^\0-\xFF]/.test(e)&&a("The string to be encoded contains characters outside of the Latin1 range.");for(var n,t,o,r,i=e.length%3,s="",d=-1,u=e.length-i;++d<u;)n=e.charCodeAt(d)<<16,t=e.charCodeAt(++d)<<8,o=e.charCodeAt(++d),s+=c.charAt((r=n+t+o)>>18&63)+c.charAt(r>>12&63)+c.charAt(r>>6&63)+c.charAt(63&r);return 2==i?(n=e.charCodeAt(d)<<8,t=e.charCodeAt(++d),s+=c.charAt((r=n+t)>>10)+c.charAt(r>>4&63)+c.charAt(r<<2&63)+"="):1==i&&(r=e.charCodeAt(d),s+=c.charAt(r>>2)+c.charAt(r<<4&63)+"=="),s},decode:function(e){var n=(e=String(e).replace(l,"")).length;n%4==0&&(n=(e=e.replace(/==?$/,"")).length),(n%4==1||/[^+a-zA-Z0-9\/]/.test(e))&&a("Invalid character: the string to be decoded is not correctly encoded.");for(var t,o,r=0,i="",s=-1;++s<n;)o=c.indexOf(e.charAt(s)),t=r%4?64*t+o:o,r++%4&&(i+=String.fromCharCode(255&t>>(-2*r&6)));return i},version:"0.1.0"};void 0===(r=function(){return f}.call(n,t,n,e))||(e.exports=r)}()}).call(this,t(8)(e),t(9))},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,