!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),i=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r};e.exports={arrayToObject:i,assign:function(e,t){return Object.keys(t).reduce(function(e,r){return e[r]=t[r],e},e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var o=t[n],i=o.obj[o.prop],a=Object.keys(i),s=0;s<a.length;++s){var c=a[s],u=i[c];"object"==typeof u&&null!==u&&-1===r.indexOf(u)&&(t.push({obj:i,prop:c}),r.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),r=t.obj[t.prop];if(Array.isArray(r)){for(var n=[],o=0;o<r.length;++o)void 0!==r[o]&&n.push(r[o]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,r){var n=e.replace(/\+/g," ");if("iso-8859-1"===r)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,r){if(0===e.length)return e;var n="string"==typeof e?e:String(e);if("iso-8859-1"===r)return escape(n).replace(/%u[0-9a-f]{4}/gi,function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"});for(var i="",a=0;a<n.length;++a){var s=n.charCodeAt(a);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?i+=n.charAt(a):s<128?i+=o[s]:s<2048?i+=o[192|s>>6]+o[128|63&s]:s<55296||s>=57344?i+=o[224|s>>12]+o[128|s>>6&63]+o[128|63&s]:(a+=1,s=65536+((1023&s)<<10|1023&n.charCodeAt(a)),i+=o[240|s>>18]+o[128|s>>12&63]+o[128|s>>6&63]+o[128|63&s])}return i},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,r,o){if(!r)return t;if("object"!=typeof r){if(Array.isArray(t))t.push(r);else{if("object"!=typeof t)return[t,r];(o&&(o.plainObjects||o.allowPrototypes)||!n.call(Object.prototype,r))&&(t[r]=!0)}return t}if("object"!=typeof t)return[t].concat(r);var a=t;return Array.isArray(t)&&!Array.isArray(r)&&(a=i(t,o)),Array.isArray(t)&&Array.isArray(r)?(r.forEach(function(r,i){n.call(t,i)?t[i]&&"object"==typeof t[i]?t[i]=e(t[i],r,o):t.push(r):t[i]=r}),t):Object.keys(r).reduce(function(t,i){var a=r[i];return n.call(t,i)?t[i]=e(t[i],a,o):t[i]=a,t},a)}}},function(e,t,r){"use strict";var n=String.prototype.replace,o=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return n.call(e,o,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,r){const n=r(3);Adequa.actions.interests={},Adequa.actions.interests.createInterest=function(e){e=Object.assign({validated:!1,removed:!1},e);const t=Adequa.storage.interests||[];t.filter(t=>t.name===e.name).length?Adequa.actions.interests.setInterest(e):(t.push(e),Adequa.storage.interests=t,Adequa.setStorage({}))},Adequa.actions.interests.checkInterest=function(e,t){if(console.log("check interest "+t,Object.assign({},Adequa.storage.tabs[t])),!Adequa.storage.tabs[t].request)return;const r=Adequa.hostname(e).split(".")[0];if(Adequa.catalogs[r]){const o=e.split("/").pop(),i=n.parse(o,{ignoreQueryPrefix:!0}),a={name:Adequa.storage.tabs[t].request.filters.keywords.text,request:Adequa.storage.tabs[t].request,category:"Immobilier",validated:!0};return Object.assign(a,Adequa.catalogs[r].parseQuery(i)),Adequa.actions.interests.createInterest(a)}return!1},Adequa.actions.interests.setInterest=function(e){for(const t in Adequa.storage.interests)Adequa.storage.interests[t].name===e.name&&(Adequa.storage.interests[t]=e)},Adequa.actions.interests.notifyAds=function(e){for(const{doc:t}of e)Adequa.actions.tabs.notify(t.title,t.text,t.link,t.image,t.price),Adequa.db.ads.put({...t,notified:!0},{force:!0}).catch()},Adequa.actions.interests.getLastAdsByInterest=function(e,t,r){Adequa.db.ads.query(function(e,r){e.interest===t.name&&r(e.generated_at)},{include_docs:!0,limit:e,descending:!0}).then(e=>{r(e.rows)})}},function(e,t,r){"use strict";var n=r(4),o=r(5),i=r(1);e.exports={formats:i,parse:o,stringify:n}},function(e,t,r){"use strict";var n=r(0),o=r(1),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},a=Array.isArray,s=Array.prototype.push,c=function(e,t){s.apply(e,a(t)?t:[t])},u=Date.prototype.toISOString,l={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},f=function e(t,r,o,i,a,s,u,f,d,p,y,g,h){var b=t;if("function"==typeof u?b=u(r,b):b instanceof Date&&(b=p(b)),null===b){if(i)return s&&!g?s(r,l.encoder,h):r;b=""}if("string"==typeof b||"number"==typeof b||"boolean"==typeof b||n.isBuffer(b))return s?[y(g?r:s(r,l.encoder,h))+"="+y(s(b,l.encoder,h))]:[y(r)+"="+y(String(b))];var m,v=[];if(void 0===b)return v;if(Array.isArray(u))m=u;else{var A=Object.keys(b);m=f?A.sort(f):A}for(var O=0;O<m.length;++O){var j=m[O];a&&null===b[j]||(Array.isArray(b)?c(v,e(b[j],o(r,j),o,i,a,s,u,f,d,p,y,g,h)):c(v,e(b[j],r+(d?"."+j:"["+j+"]"),o,i,a,s,u,f,d,p,y,g,h)))}return v};e.exports=function(e,t){var r=e,a=t?n.assign({},t):{};if(null!==a.encoder&&void 0!==a.encoder&&"function"!=typeof a.encoder)throw new TypeError("Encoder has to be a function.");var s=void 0===a.delimiter?l.delimiter:a.delimiter,u="boolean"==typeof a.strictNullHandling?a.strictNullHandling:l.strictNullHandling,d="boolean"==typeof a.skipNulls?a.skipNulls:l.skipNulls,p="boolean"==typeof a.encode?a.encode:l.encode,y="function"==typeof a.encoder?a.encoder:l.encoder,g="function"==typeof a.sort?a.sort:null,h=void 0===a.allowDots?l.allowDots:!!a.allowDots,b="function"==typeof a.serializeDate?a.serializeDate:l.serializeDate,m="boolean"==typeof a.encodeValuesOnly?a.encodeValuesOnly:l.encodeValuesOnly,v=a.charset||l.charset;if(void 0!==a.charset&&"utf-8"!==a.charset&&"iso-8859-1"!==a.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===a.format)a.format=o.default;else if(!Object.prototype.hasOwnProperty.call(o.formatters,a.format))throw new TypeError("Unknown format option provided.");var A,O,j=o.formatters[a.format];"function"==typeof a.filter?r=(O=a.filter)("",r):Array.isArray(a.filter)&&(A=O=a.filter);var w,x=[];if("object"!=typeof r||null===r)return"";w=a.arrayFormat in i?a.arrayFormat:"indices"in a?a.indices?"indices":"repeat":"indices";var q=i[w];A||(A=Object.keys(r)),g&&A.sort(g);for(var P=0;P<A.length;++P){var S=A[P];d&&null===r[S]||c(x,f(r[S],S,q,u,d,p?y:null,O,g,h,b,j,m,v))}var N=x.join(s),D=!0===a.addQueryPrefix?"?":"";return a.charsetSentinel&&(D+="iso-8859-1"===v?"utf8=%26%2310003%3B&":"utf8=%E2%9C%93&"),N.length>0?D+N:""}},function(e,t,r){"use strict";var n=r(0),o=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,function(e,t){return String.fromCharCode(parseInt(t,10))})},s=function(e,t,r){if(e){var n=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,a=/(\[[^[\]]*])/.exec(n),s=a?n.slice(0,a.index):n,c=[];if(s){if(!r.plainObjects&&o.call(Object.prototype,s)&&!r.allowPrototypes)return;c.push(s)}for(var u=0;null!==(a=i.exec(n))&&u<r.depth;){if(u+=1,!r.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!r.allowPrototypes)return;c.push(a[1])}return a&&c.push("["+n.slice(a.index)+"]"),function(e,t,r){for(var n=t,o=e.length-1;o>=0;--o){var i,a=e[o];if("[]"===a&&r.parseArrays)i=[].concat(n);else{i=r.plainObjects?Object.create(null):{};var s="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,c=parseInt(s,10);r.parseArrays||""!==s?!isNaN(c)&&a!==s&&String(c)===s&&c>=0&&r.parseArrays&&c<=r.arrayLimit?(i=[])[c]=n:i[s]=n:i={0:n}}n=i}return n}(c,t,r)}};e.exports=function(e,t){var r=t?n.assign({},t):{};if(null!==r.decoder&&void 0!==r.decoder&&"function"!=typeof r.decoder)throw new TypeError("Decoder has to be a function.");if(r.ignoreQueryPrefix=!0===r.ignoreQueryPrefix,r.delimiter="string"==typeof r.delimiter||n.isRegExp(r.delimiter)?r.delimiter:i.delimiter,r.depth="number"==typeof r.depth?r.depth:i.depth,r.arrayLimit="number"==typeof r.arrayLimit?r.arrayLimit:i.arrayLimit,r.parseArrays=!1!==r.parseArrays,r.decoder="function"==typeof r.decoder?r.decoder:i.decoder,r.allowDots=void 0===r.allowDots?i.allowDots:!!r.allowDots,r.plainObjects="boolean"==typeof r.plainObjects?r.plainObjects:i.plainObjects,r.allowPrototypes="boolean"==typeof r.allowPrototypes?r.allowPrototypes:i.allowPrototypes,r.parameterLimit="number"==typeof r.parameterLimit?r.parameterLimit:i.parameterLimit,r.strictNullHandling="boolean"==typeof r.strictNullHandling?r.strictNullHandling:i.strictNullHandling,void 0!==r.charset&&"utf-8"!==r.charset&&"iso-8859-1"!==r.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===r.charset&&(r.charset=i.charset),""===e||null==e)return r.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var r,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=t.parameterLimit===1/0?void 0:t.parameterLimit,l=c.split(t.delimiter,u),f=-1,d=t.charset;if(t.charsetSentinel)for(r=0;r<l.length;++r)0===l[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===l[r]?d="utf-8":"utf8=%26%2310003%3B"===l[r]&&(d="iso-8859-1"),f=r,r=l.length);for(r=0;r<l.length;++r)if(r!==f){var p,y,g=l[r],h=g.indexOf("]="),b=-1===h?g.indexOf("="):h+1;-1===b?(p=t.decoder(g,i.decoder,d),y=t.strictNullHandling?null:""):(p=t.decoder(g.slice(0,b),i.decoder,d),y=t.decoder(g.slice(b+1),i.decoder,d)),y&&t.interpretNumericEntities&&"iso-8859-1"===d&&(y=a(y)),o.call(s,p)?s[p]=n.combine(s[p],y):s[p]=y}return s}(e,r):e,u=r.plainObjects?Object.create(null):{},l=Object.keys(c),f=0;f<l.length;++f){var d=l[f],p=s(d,c[d],r);u=n.merge(u,p,r)}return n.compact(u)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,