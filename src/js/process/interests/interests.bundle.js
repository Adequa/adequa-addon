!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),i=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r};e.exports={arrayToObject:i,assign:function(e,t){return Object.keys(t).reduce(function(e,r){return e[r]=t[r],e},e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var o=t[n],i=o.obj[o.prop],a=Object.keys(i),c=0;c<a.length;++c){var s=a[c],l=i[s];"object"==typeof l&&null!==l&&-1===r.indexOf(l)&&(t.push({obj:i,prop:s}),r.push(l))}return function(e){for(;e.length>1;){var t=e.pop(),r=t.obj[t.prop];if(Array.isArray(r)){for(var n=[],o=0;o<r.length;++o)void 0!==r[o]&&n.push(r[o]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,r){var n=e.replace(/\+/g," ");if("iso-8859-1"===r)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,r){if(0===e.length)return e;var n="string"==typeof e?e:String(e);if("iso-8859-1"===r)return escape(n).replace(/%u[0-9a-f]{4}/gi,function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"});for(var i="",a=0;a<n.length;++a){var c=n.charCodeAt(a);45===c||46===c||95===c||126===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122?i+=n.charAt(a):c<128?i+=o[c]:c<2048?i+=o[192|c>>6]+o[128|63&c]:c<55296||c>=57344?i+=o[224|c>>12]+o[128|c>>6&63]+o[128|63&c]:(a+=1,c=65536+((1023&c)<<10|1023&n.charCodeAt(a)),i+=o[240|c>>18]+o[128|c>>12&63]+o[128|c>>6&63]+o[128|63&c])}return i},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,r,o){if(!r)return t;if("object"!=typeof r){if(Array.isArray(t))t.push(r);else{if("object"!=typeof t)return[t,r];(o&&(o.plainObjects||o.allowPrototypes)||!n.call(Object.prototype,r))&&(t[r]=!0)}return t}if("object"!=typeof t)return[t].concat(r);var a=t;return Array.isArray(t)&&!Array.isArray(r)&&(a=i(t,o)),Array.isArray(t)&&Array.isArray(r)?(r.forEach(function(r,i){n.call(t,i)?t[i]&&"object"==typeof t[i]?t[i]=e(t[i],r,o):t.push(r):t[i]=r}),t):Object.keys(r).reduce(function(t,i){var a=r[i];return n.call(t,i)?t[i]=e(t[i],a,o):t[i]=a,t},a)}}},function(e,t,r){"use strict";var n=String.prototype.replace,o=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return n.call(e,o,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,r){const n=r(3);Adequa.qs=n,Adequa.process.interests={};const o=function(e,t=""){if(0===Object.keys(e).length)return t;const[r,n]=Object.entries(e)[0];return""!==t&&(t+="_"),o(n,t+=r)},i=function(e){const t=Adequa.domain(e),r=e.split("?").slice(-1)[0],i=function(e,t){const r=Adequa.storage.websiteParameters[e];if(!r)return!1;for(const[e,n]of Object.entries(t)){const t=r[e];if(!t)continue;const i=t[n];if(i)return o(i)}return!1}(t,n.parse(r));if(!i)return!1;const a=Adequa.storage.websiteRequests[e.split("?")[0]];a&&Adequa.model.interest.saveOrUpdate({category:i},e,a).then(t=>{Adequa.model.actionWithInterest.save({action_type:a.action_type,action_url:e,action_timestamp:Date.now(),interest_id:t,interest_category:i}),Adequa.process.analytics.sendAnonymousEvent(e,"advertising","new_action_with_interest",a.action_type,void 0,{cd5:encodeURI(t),cd6:encodeURI(i),dl:encodeURI(e)})})};Adequa.process.interests.checkUrl=function(e){!function(e){for(const[t,r]of Object.entries(Adequa.storage.websiteCategory))if(-1!==e.indexOf(t)){Adequa.model.interest.saveOrUpdate({category:r.category},e,r).then(t=>{Adequa.model.actionWithInterest.save({action_type:r.action_type,action_url:e,action_timestamp:Date.now(),interest_id:t,interest_category:r.category}),Adequa.process.analytics.sendAnonymousEvent(e,"advertising","new_action_with_interest",r.action_type,void 0,{cd5:encodeURI(t),cd6:encodeURI(r.category),dl:encodeURI(e)})});break}}(e),-1!==e.indexOf("?")&&i(e)};const a=function(e,t,r={}){if(0===Object.keys(e).length)return r;const[n,o]=Object.entries(e)[0];return r[n]=t,a(o,t,r)},c=function(e,t,r={}){if(!e)return t;if(0===Object.keys(e).length)return t;for(const n in e){if(Object.keys(e[n]).length>1)return c(e[n],t[n],r);Object.assign(r,a(e[n],t[n]))}return r};Adequa.process.interests.checkRequest=function(e){const t=e.url;let r=null;if(e.requestBody&&e.requestBody.raw&&"POST"===e.method)r=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(e.requestBody.raw[0].bytes)));else{if("GET"!==e.method||-1===t.indexOf("?"))return;r=n.parse(e.url.split("?").slice(-1)[0],{ignoreQueryPrefix:!0})}const o=Adequa.storage.websiteRequests[e.url.split("?")[0]];if(!o)return;const i=c(o.parameters,r);if(i&&0!==Object.keys(i).length&&(1!==Object.keys(i).length||!i.label))for(const[e,r]of Object.entries(Adequa.storage.websiteCategory))if(-1!==t.indexOf(e)){Adequa.model.interest.saveOrUpdate({category:r.category,parameters:i},t,o).then(e=>{Adequa.model.actionWithInterest.save({action_type:o.action_type,action_url:t,action_timestamp:Date.now(),interest_id:e,interest_category:r.category}),Adequa.process.analytics.sendAnonymousEvent(t,"advertising","new_action_with_interest",o.action_type,void 0,{cd5:encodeURI(e),cd6:encodeURI(r.category),dl:encodeURI(t)})});break}}},function(e,t,r){"use strict";var n=r(4),o=r(5),i=r(1);e.exports={formats:i,parse:o,stringify:n}},function(e,t,r){"use strict";var n=r(0),o=r(1),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},a=Array.isArray,c=Array.prototype.push,s=function(e,t){c.apply(e,a(t)?t:[t])},l=Date.prototype.toISOString,u={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,indices:!1,serializeDate:function(e){return l.call(e)},skipNulls:!1,strictNullHandling:!1},f=function e(t,r,o,i,a,c,l,f,d,p,y,h,g){var b=t;if("function"==typeof l?b=l(r,b):b instanceof Date&&(b=p(b)),null===b){if(i)return c&&!h?c(r,u.encoder,g):r;b=""}if("string"==typeof b||"number"==typeof b||"boolean"==typeof b||n.isBuffer(b))return c?[y(h?r:c(r,u.encoder,g))+"="+y(c(b,u.encoder,g))]:[y(r)+"="+y(String(b))];var m,v=[];if(void 0===b)return v;if(Array.isArray(l))m=l;else{var O=Object.keys(b);m=f?O.sort(f):O}for(var j=0;j<m.length;++j){var A=m[j];a&&null===b[A]||(Array.isArray(b)?s(v,e(b[A],o(r,A),o,i,a,c,l,f,d,p,y,h,g)):s(v,e(b[A],r+(d?"."+A:"["+A+"]"),o,i,a,c,l,f,d,p,y,h,g)))}return v};e.exports=function(e,t){var r=e,a=t?n.assign({},t):{};if(null!==a.encoder&&void 0!==a.encoder&&"function"!=typeof a.encoder)throw new TypeError("Encoder has to be a function.");var c=void 0===a.delimiter?u.delimiter:a.delimiter,l="boolean"==typeof a.strictNullHandling?a.strictNullHandling:u.strictNullHandling,d="boolean"==typeof a.skipNulls?a.skipNulls:u.skipNulls,p="boolean"==typeof a.encode?a.encode:u.encode,y="function"==typeof a.encoder?a.encoder:u.encoder,h="function"==typeof a.sort?a.sort:null,g=void 0===a.allowDots?u.allowDots:!!a.allowDots,b="function"==typeof a.serializeDate?a.serializeDate:u.serializeDate,m="boolean"==typeof a.encodeValuesOnly?a.encodeValuesOnly:u.encodeValuesOnly,v=a.charset||u.charset;if(void 0!==a.charset&&"utf-8"!==a.charset&&"iso-8859-1"!==a.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===a.format)a.format=o.default;else if(!Object.prototype.hasOwnProperty.call(o.formatters,a.format))throw new TypeError("Unknown format option provided.");var O,j,A=o.formatters[a.format];"function"==typeof a.filter?r=(j=a.filter)("",r):Array.isArray(a.filter)&&(O=j=a.filter);var w,_=[];if("object"!=typeof r||null===r)return"";w=a.arrayFormat in i?a.arrayFormat:"indices"in a?a.indices?"indices":"repeat":"indices";var x=i[w];O||(O=Object.keys(r)),h&&O.sort(h);for(var P=0;P<O.length;++P){var q=O[P];d&&null===r[q]||s(_,f(r[q],q,x,l,d,p?y:null,j,h,g,b,A,m,v))}var R=_.join(c),k=!0===a.addQueryPrefix?"?":"";return a.charsetSentinel&&(k+="iso-8859-1"===v?"utf8=%26%2310003%3B&":"utf8=%E2%9C%93&"),R.length>0?k+R:""}},function(e,t,r){"use strict";var n=r(0),o=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,function(e,t){return String.fromCharCode(parseInt(t,10))})},c=function(e,t,r){if(e){var n=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,a=/(\[[^[\]]*])/.exec(n),c=a?n.slice(0,a.index):n,s=[];if(c){if(!r.plainObjects&&o.call(Object.prototype,c)&&!r.allowPrototypes)return;s.push(c)}for(var l=0;null!==(a=i.exec(n))&&l<r.depth;){if(l+=1,!r.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!r.allowPrototypes)return;s.push(a[1])}return a&&s.push("["+n.slice(a.index)+"]"),function(e,t,r){for(var n=t,o=e.length-1;o>=0;--o){var i,a=e[o];if("[]"===a&&r.parseArrays)i=[].concat(n);else{i=r.plainObjects?Object.create(null):{};var c="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,s=parseInt(c,10);r.parseArrays||""!==c?!isNaN(s)&&a!==c&&String(s)===c&&s>=0&&r.parseArrays&&s<=r.arrayLimit?(i=[])[s]=n:i[c]=n:i={0:n}}n=i}return n}(s,t,r)}};e.exports=function(e,t){var r=t?n.assign({},t):{};if(null!==r.decoder&&void 0!==r.decoder&&"function"!=typeof r.decoder)throw new TypeError("Decoder has to be a function.");if(r.ignoreQueryPrefix=!0===r.ignoreQueryPrefix,r.delimiter="string"==typeof r.delimiter||n.isRegExp(r.delimiter)?r.delimiter:i.delimiter,r.depth="number"==typeof r.depth?r.depth:i.depth,r.arrayLimit="number"==typeof r.arrayLimit?r.arrayLimit:i.arrayLimit,r.parseArrays=!1!==r.parseArrays,r.decoder="function"==typeof r.decoder?r.decoder:i.decoder,r.allowDots=void 0===r.allowDots?i.allowDots:!!r.allowDots,r.plainObjects="boolean"==typeof r.plainObjects?r.plainObjects:i.plainObjects,r.allowPrototypes="boolean"==typeof r.allowPrototypes?r.allowPrototypes:i.allowPrototypes,r.parameterLimit="number"==typeof r.parameterLimit?r.parameterLimit:i.parameterLimit,r.strictNullHandling="boolean"==typeof r.strictNullHandling?r.strictNullHandling:i.strictNullHandling,void 0!==r.charset&&"utf-8"!==r.charset&&"iso-8859-1"!==r.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===r.charset&&(r.charset=i.charset),""===e||null==e)return r.plainObjects?Object.create(null):{};for(var s="string"==typeof e?function(e,t){var r,c={},s=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,l=t.parameterLimit===1/0?void 0:t.parameterLimit,u=s.split(t.delimiter,l),f=-1,d=t.charset;if(t.charsetSentinel)for(r=0;r<u.length;++r)0===u[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===u[r]?d="utf-8":"utf8=%26%2310003%3B"===u[r]&&(d="iso-8859-1"),f=r,r=u.length);for(r=0;r<u.length;++r)if(r!==f){var p,y,h=u[r],g=h.indexOf("]="),b=-1===g?h.indexOf("="):g+1;-1===b?(p=t.decoder(h,i.decoder,d),y=t.strictNullHandling?null:""):(p=t.decoder(h.slice(0,b),i.decoder,d),y=t.decoder(h.slice(b+1),i.decoder,d)),y&&t.interpretNumericEntities&&"iso-8859-1"===d&&(y=a(y)),o.call(c,p)?c[p]=n.combine(c[p],y):c[p]=y}return c}(e,r):e,l=r.plainObjects?Object.create(null):{},u=Object.keys(s),f=0;f<u.length;++f){var d=u[f],p=c(d,s[d],r);l=n.merge(l,p,r)}return n.compact(l)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,